import React, { useState } from "react";
import { MapPin, X, Check, AlertCircle, ArrowLeft } from "lucide-react";

const DELIVERY_FEE = 500;
const STAFF_PRICE = 500;
const HELPER_PRICE = 500;
const TABLE_PRICE = 200;

const VALID_COUPONS = {
  GSR10: 10,
  GSR15: 15,
};

const HYDERABAD_LOCATIONS = [
  "Hitech City",
  "Gachibowli",
  "Madhapur",
  "Jubilee Hills",
  "Banjara Hills",
  "Kukatpally",
  "Ameerpet",
  "Secunderabad",
  "Begumpet",
  "Kondapur",
];

const SupOrder = ({
  selectedItems = [],
  platePrice = 0,
  guestCount = 0,
  totalAmount = 0,
  onBackToMenu, // Callback to go back to UniversalMenu
}) => {
  const [showPaymentSuccess, setShowPaymentSuccess] = useState(false);
  const [couponCode, setCouponCode] = useState("");
  const [appliedCoupon, setAppliedCoupon] = useState(null);
  const [couponError, setCouponError] = useState("");
  const [showCouponSuccess, setShowCouponSuccess] = useState(false);
  const [isLoadingLocation, setIsLoadingLocation] = useState(false);

  const timeSlots = [
    "12:00 PM",
    "1:00 PM",
    "2:00 PM",
    "3:00 PM",
    "4:00 PM",
    "5:00 PM",
    "6:00 PM",
    "7:00 PM",
    "8:00 PM",
  ];

  const [userDetails, setUserDetails] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    alternateNumber: "",
    city: "",
    address: "",
    landmark: "",
    date: "",
    time: "",
    numberOfTables: 0,
    numberOfStaff: 0,
    numberOfHelpers: 0,
  });

  const [minDate, setMinDate] = useState("");

  // Set minimum date based on guest count
  React.useEffect(() => {
    const today = new Date();
    const tomorrow = new Date(today);

    if (guestCount > 100) {
      tomorrow.setDate(today.getDate() + 2);
    } else {
      tomorrow.setDate(today.getDate() + 1);
    }

    setMinDate(tomorrow.toISOString().split("T")[0]);
  }, [guestCount]);

  const detectLocation = () => {
    setIsLoadingLocation(true);
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          try {
            const response = await fetch(
              `https://nominatim.openstreetmap.org/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&format=json`
            );
            const data = await response.json();
            setUserDetails((prev) => ({
              ...prev,
              address:
                data.display_name ||
                "Location detected (Please add specific details)",
            }));
          } catch (error) {
            console.error("Error fetching address:", error);
          } finally {
            setIsLoadingLocation(false);
          }
        },
        (error) => {
          console.error("Error getting location:", error);
          setIsLoadingLocation(false);
        }
      );
    }
  };

  const calculateTotals = () => {
    const staffCost = userDetails.numberOfStaff * STAFF_PRICE;
    const helperCost = userDetails.numberOfHelpers * HELPER_PRICE;
    const tablesCost = userDetails.numberOfTables * TABLE_PRICE;

    const baseCost = platePrice * guestCount;
    const extraItemsCost = selectedItems.filter((item) => item.isExtra).length * 50;

    const subtotal = baseCost + extraItemsCost + staffCost + helperCost + tablesCost;

    let discount = 0;
    if (appliedCoupon) {
      discount = (subtotal * VALID_COUPONS[appliedCoupon]) / 100;
    }

    const discountedSubtotal = subtotal - discount;
    const gst = discountedSubtotal * 0.18;
    const total = discountedSubtotal + gst + DELIVERY_FEE;

    return {
      baseCost,
      extraItemsCost,
      staffCost,
      helperCost,
      tablesCost,
      subtotal,
      discount,
      gst,
      total,
    };
  };

  const handleCouponApply = () => {
    setCouponError("");
    setShowCouponSuccess(false);

    if (!couponCode.trim()) {
      setCouponError("Please enter a coupon code");
      return;
    }

    if (VALID_COUPONS[couponCode]) {
      setAppliedCoupon(couponCode);
      setShowCouponSuccess(true);
      setTimeout(() => setShowCouponSuccess(false), 3000);
    } else {
      setCouponError("Invalid coupon code");
    }
  };

  const removeCoupon = () => {
    setAppliedCoupon(null);
    setCouponCode("");
    setCouponError("");
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUserDetails((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = () => {
    const requiredFields = [
      "fullName",
      "email",
      "phoneNumber",
      "city",
      "address",
      "landmark",
      "date",
      "time",
    ];

    const missingFields = requiredFields.filter((field) => !userDetails[field]);

    if (missingFields.length > 0) {
      alert(`Please fill in all required fields: ${missingFields.join(", ")}`);
      return;
    }

    setShowPaymentSuccess(true);
  };

  const totals = calculateTotals();

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Back to Menu Button */}
        <button
          onClick={onBackToMenu}
          className="mb-6 flex items-center text-blue-600 hover:text-blue-800"
        >
          <ArrowLeft className="mr-2" /> Back to Menu
        </button>

        <div className="grid md:grid-cols-2 gap-8">
          {/* Customer Details Form */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6">Customer Details</h2>
            {/* Form fields remain the same as before */}
          </div>

          {/* Order Summary */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6">Order Summary</h2>

            {/* Selected Items */}
            <div className="mb-6 max-h-64 overflow-y-auto">
              <h3 className="font-semibold mb-2">Selected Items</h3>
              <div className="space-y-2">
                {selectedItems.map((item, index) => (
                  <div key={index} className="flex justify-between text-sm">
                    <span>{item.item_name}</span>
                    {item.isExtra && (
                      <span className="text-orange-600">+₹50</span>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Price Breakdown */}
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>
                  Base Cost (₹{platePrice} × {guestCount})
                </span>
                <span>₹{totals.baseCost.toFixed(2)}</span>
              </div>

              {totals.extraItemsCost > 0 && (
                <div className="flex justify-between">
                  <span>Extra Items</span>
                  <span>₹{totals.extraItemsCost.toFixed(2)}</span>
                </div>
              )}

              <div className="flex justify-between font-medium">
                <span>Subtotal</span>
                <span>₹{totals.subtotal.toFixed(2)}</span>
              </div>

              {totals.discount > 0 && (
                <div className="flex justify-between text-green-600">
                  <span>Discount ({VALID_COUPONS[appliedCoupon]}% off)</span>
                  <span>-₹{totals.discount.toFixed(2)}</span>
                </div>
              )}

              <div className="flex justify-between">
                <span>GST (18%)</span>
                <span>₹{totals.gst.toFixed(2)}</span>
              </div>

              <div className="flex justify-between">
                <span>Delivery Fee</span>
                <span>₹{DELIVERY_FEE.toFixed(2)}</span>
              </div>

              <div className="flex justify-between text-lg font-bold pt-2 border-t">
                <span>Total</span>
                <span>₹{totals.total.toFixed(2)}</span>
              </div>
            </div>

            <button
              onClick={handleSubmit}
              className="w-full mt-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300"
            >
              Proceed to Payment
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SupOrder;